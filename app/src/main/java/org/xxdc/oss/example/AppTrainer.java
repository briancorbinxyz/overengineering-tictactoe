/*
 * This source file was generated by the Gradle 'init' task
 */
package org.xxdc.oss.example;

import static org.xxdc.oss.example.analysis.Analyzers.strategicTurningPoints;

import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import org.xxdc.oss.example.bot.BotStrategy;
import org.xxdc.oss.example.commentary.EsportsLiveCommentaryPersona;
import org.xxdc.oss.example.commentary.EsportsPostAnalysisConmmentaryPersona;

/// A simple java tic-tac-toe game with a bot playing another bot for training
/// the JDK for AOT class loading and linking. NB: Uses bots so not all paths are
/// stress tested.
/// See: [JEP 483](https://openjdk.org/jeps/483)
///
/// 1. Record AOT Configuration
/// `java -XX:AOTMode=record -XX:AOTConfiguration=app.aotconf -cp %classpath%
// org.xxdc.oss.example.AppTrainer`
/// 2. Record AOT Cache
/// `java -XX:AOTMode=create -XX:AOTConfiguration=app.aotconf -XX:AOTCache=app.aot -cp %classpath%
// org.xxdc.oss.example.AppTrainer`
/// 3. Run the app with the AOT Cache
/// `java -XX:AOTCache=app.aot -cp %classpath% org.xxdc.oss.example.AppTrainer`
public class AppTrainer {

  /** Create a simple 2 bot player 3x3 game of tic-tac-toe using alpha-beta */
  public AppTrainer() {
    // default
  }

  private static final Logger log = System.getLogger(AppTrainer.class.getName());

  /**
   * Runs the game with deefault settings and commentary.
   *
   * @throws Exception if there is an error whilst playing the game
   */
  public void run() throws Exception {
    try (var game = newStandardGame()) {
      game.playWithAction(this::logLiveCommentary);
      logPostAnalysisCommentary(game);
    }
  }

  private void logLiveCommentary(Game game) {
    var commentary = new EsportsLiveCommentaryPersona();
    game.history().stream()
        .skip(game.moveNumber() - 1) // latest move state changes only
        .gather(strategicTurningPoints())
        .map(commentary::comment)
        .forEach(l -> log.log(Level.INFO, "\"{0}\"", l));
  }

  private void logPostAnalysisCommentary(Game game) {
    log.log(Level.INFO, "Post-Game Analysis:");
    var commentary = new EsportsPostAnalysisConmmentaryPersona();
    game.history().stream()
        .gather(strategicTurningPoints())
        .map(commentary::comment)
        .forEach(l -> log.log(Level.INFO, "- \"{0}\"", l));
  }

  /**
   * Returns a greeting message for the Tic-Tac-Toe game.
   *
   * @return the greeting message
   */
  public String getGreeting() {
    return "Welcome to Tic-Tac-Toe!";
  }

  /**
   * The main entry point for the Tic-Tac-Toe application for a bot vs bot
   *
   * @param args the command-line arguments
   * @throws Exception if there is an error whilst playing the game or loading the game state
   */
  @SuppressWarnings("unused")
  public static void main(String[] args) throws Exception {
    AppTrainer app = new AppTrainer();
    log.log(Level.INFO, app::getGreeting);
    app.run();
  }

  private Game newStandardGame() {
    return new Game(
        3,
        false,
        new PlayerNode.Local<>("X", new BotPlayer(BotStrategy.ALPHABETA)),
        new PlayerNode.Local<>("O", new BotPlayer(BotStrategy.ALPHABETA)));
  }
}
